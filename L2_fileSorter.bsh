#!/bin/bash   # This tells the system to use Bash to execute the script

# Function to create directories if they don't exist
create_dir() {
        local dir=$1  # 'local' means this variable only exists in this function
        if [ ! -d "$dir" ]; then  # Check if directory DOES NOT exist (-d)
                mkdir "$dir"  # Create the directory
                echo "Created Dir: $dir"  # Tell user we made it
        else
                # Silent error if directory exists (output redirected to null)
                echo "Dir exsists: $dir" >/dev/null  
        fi
}

# Main function to sort files into categories
organize_files() {
        local dir=$1  # Get target directory from function argument

        # Define arrays of file extensions for each category
        imgs=("jpg" "png" "gif")    # Image extensions
        docs=("pdf" "docx" "txt")   # Document extensions
        arch=("zip" "gz" "rar")     # Archive extensions

        # Process each file in the directory
        while IFS= read -r file; do  # Safe way to read filenames with spaces
                if [ "$file" ]; then  # Check if file exists
                        # Extract file extension using reverse-cut-reverse trick
                        ext=$( echo "$file" | rev | cut -d '.' -f1 | rev)
                        
                        # Check if extension is in images array
                        if [[ " ${imgs[@]} " =~ "$ext " ]]; then
                                create_dir "$dir/Images"
                                mv "$file" "$dir/Images"  # Move file to Images
                        # Check if extension is in documents array
                        elif [[ " ${docs[@]} " =~ "$ext " ]]; then
                                create_dir "$dir/Docs"
                                mv "$file" "$dir/Docs"     # Move file to Docs
                        # Check if extension is in archives array
                        elif [[ " ${arch[@]} " =~ "$ext " ]]; then
                                create_dir "$dir/Arch"
                                mv "$file" "$dir/Arch"     # Move file to Arch
                        fi
                fi
        done < <(find "$dir" -maxdepth 1 -type f)  # Find all files in directory using Process substitution
}

# Main program flow
main() {
        echo "File Orginizer Script"  # Show script title
        read -p "Enter directory to orginaize: " target_dir  # Get user input

        if [ -d "$target_dir" ]; then  # Check if directory exists (-d)
                organize_files "$target_dir"  # Run organizer with user's directory
                echo "Organization complete!"
        else
                echo "Error: Dir not found!"  # Show error if directory invalid
        fi
}

# Start the program by calling main function
main
